{"ast":null,"code":"import config from \"../client-config\";\nimport isEmpty from \"../validator/isEmpty\";\nimport Router from 'next/router';\n/**\n * Check if user is logged in.\n *\n * @return {object} Auth Object containing token and user data, false on failure.\n */\n\nexport var isUserValidated = function isUserValidated() {\n  var authTokenData = localStorage.getItem(config.authTokenName);\n  var userLoggedInData = '';\n\n  if (!isEmpty(authTokenData)) {\n    authTokenData = JSON.parse(authTokenData);\n\n    if (!isEmpty(authTokenData.authToken)) {\n      userLoggedInData = authTokenData;\n    }\n  } // console.log({userLoggedInData});\n\n\n  return userLoggedInData;\n};\n/**\n * Logout the user.\n *\n * @param {string} urlToRedirect URL where user needs to be redirected after logout.\n *\n * @return {void}\n */\n\nexport var logoutUser = function logoutUser(urlToRedirect) {\n  // Set auth data value in localStorage to empty.\n  localStorage.setItem(config.authTokenName, ''); // Redirect the user to the given url.\n\n  Router.push(urlToRedirect);\n};","map":{"version":3,"sources":["/Users/kukreja/Projects/Freelance/injiri-ecommerce/util/auth-functions.js"],"names":["config","isEmpty","Router","isUserValidated","authTokenData","localStorage","getItem","authTokenName","userLoggedInData","JSON","parse","authToken","logoutUser","urlToRedirect","setItem","push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA;;;;;;AAKA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAEpC,MAAIC,aAAa,GAAGC,YAAY,CAACC,OAAb,CAAsBN,MAAM,CAACO,aAA7B,CAApB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;;AAEA,MAAK,CAAEP,OAAO,CAAEG,aAAF,CAAd,EAAkC;AAEjCA,IAAAA,aAAa,GAAGK,IAAI,CAACC,KAAL,CAAYN,aAAZ,CAAhB;;AAEA,QAAK,CAAEH,OAAO,CAAEG,aAAa,CAACO,SAAhB,CAAd,EAA4C;AAC3CH,MAAAA,gBAAgB,GAAGJ,aAAnB;AACA;AACD,GAZmC,CAapC;;;AAEA,SAAOI,gBAAP;AAEA,CAjBM;AAmBP;;;;;;;;AAOA,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAEC,aAAF,EAAqB;AAE9C;AACAR,EAAAA,YAAY,CAACS,OAAb,CAAsBd,MAAM,CAACO,aAA7B,EAA4C,EAA5C,EAH8C,CAK9C;;AACAL,EAAAA,MAAM,CAACa,IAAP,CAAaF,aAAb;AAEA,CARM","sourcesContent":["import config from \"../client-config\";\nimport isEmpty from \"../validator/isEmpty\";\nimport Router from 'next/router';\n\n/**\n * Check if user is logged in.\n *\n * @return {object} Auth Object containing token and user data, false on failure.\n */\nexport const isUserValidated = () => {\n\n\tlet authTokenData = localStorage.getItem( config.authTokenName );\n\tlet userLoggedInData = '';\n\n\tif ( ! isEmpty( authTokenData ) ) {\n\n\t\tauthTokenData = JSON.parse( authTokenData );\n\n\t\tif ( ! isEmpty( authTokenData.authToken ) ) {\n\t\t\tuserLoggedInData = authTokenData;\n\t\t}\n\t}\n\t// console.log({userLoggedInData});\n\t\n\treturn userLoggedInData;\n\n};\n\n/**\n * Logout the user.\n *\n * @param {string} urlToRedirect URL where user needs to be redirected after logout.\n *\n * @return {void}\n */\nexport const logoutUser = ( urlToRedirect ) => {\n\n\t// Set auth data value in localStorage to empty.\n\tlocalStorage.setItem( config.authTokenName, '' );\n\n\t// Redirect the user to the given url.\n\tRouter.push( urlToRedirect );\n\n};\n\n"]},"metadata":{},"sourceType":"module"}