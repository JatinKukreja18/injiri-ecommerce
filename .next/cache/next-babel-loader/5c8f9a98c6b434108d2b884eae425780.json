{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/kukreja/Projects/Freelance/injiri-ecommerce/components/layouts/Header.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport Nav from \"./Nav\";\n\nRouter.onRouteChangeStart = () => {\n  NProgress.start();\n};\n\nRouter.onRouteChangeComplete = () => {\n  NProgress.done();\n};\n\nRouter.onRouteChangeError = () => {\n  NProgress.done();\n};\n\nlet lastScroll = 0;\n\nclass Header extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scrolled: false,\n      scrollDirection: false\n    });\n\n    _defineProperty(this, \"handleScroll\", event => {\n      let scrollTop = event.target.scrollingElement.scrollTop;\n      let direction = 'down';\n\n      if (scrollTop > lastScroll && scrollTop > 490) {\n        direction = 'down';\n      } else {\n        direction = 'up';\n      }\n\n      if (scrollTop > 100) {\n        this.setState({\n          scrolled: true,\n          scrollDirection: direction\n        });\n      } else {\n        this.setState({\n          scrolled: false,\n          scrollDirection: direction\n        });\n      }\n\n      lastScroll = scrollTop;\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  render() {\n    const {\n      scrollDirection,\n      scrolled\n    } = this.state;\n    return __jsx(Nav, {\n      scrolled: scrolled,\n      scrollDirection: scrollDirection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  }\n\n}\n\n;\nexport default Header;","map":{"version":3,"sources":["/Users/kukreja/Projects/Freelance/injiri-ecommerce/components/layouts/Header.js"],"names":["React","Router","NProgress","Nav","onRouteChangeStart","start","onRouteChangeComplete","done","onRouteChangeError","lastScroll","Header","Component","scrolled","scrollDirection","event","scrollTop","target","scrollingElement","direction","setState","componentDidMount","window","addEventListener","handleScroll","componentWillUnmount","removeEventListener","render","state"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEAF,MAAM,CAACG,kBAAP,GAA4B,MAAM;AACjCF,EAAAA,SAAS,CAACG,KAAV;AACA,CAFD;;AAGAJ,MAAM,CAACK,qBAAP,GAA+B,MAAM;AACpCJ,EAAAA,SAAS,CAACK,IAAV;AACA,CAFD;;AAIAN,MAAM,CAACO,kBAAP,GAA4B,MAAM;AACjCN,EAAAA,SAAS,CAACK,IAAV;AACA,CAFD;;AAIA,IAAIE,UAAU,GAAG,CAAjB;;AACA,MAAMC,MAAN,SAAqBV,KAAK,CAACW,SAA3B,CAAqC;AAAA;AAAA;;AAAA,mCAC9B;AACLC,MAAAA,QAAQ,EAAE,KADL;AAELC,MAAAA,eAAe,EAAC;AAFX,KAD8B;;AAAA,0CAWpBC,KAAD,IAAW;AACzB,UAAIC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,gBAAb,CAA8BF,SAA9C;AACA,UAAIG,SAAS,GAAG,MAAhB;;AACA,UAAGH,SAAS,GAAGN,UAAZ,IAA0BM,SAAS,GAAG,GAAzC,EAA6C;AAC5CG,QAAAA,SAAS,GAAG,MAAZ;AACA,OAFD,MAEK;AACJA,QAAAA,SAAS,GAAG,IAAZ;AACA;;AACD,UAAGH,SAAS,GAAE,GAAd,EAAkB;AACjB,aAAKI,QAAL,CAAc;AACbP,UAAAA,QAAQ,EAAE,IADG;AAEbC,UAAAA,eAAe,EAAEK;AAFJ,SAAd;AAIA,OALD,MAKK;AACJ,aAAKC,QAAL,CAAc;AACbP,UAAAA,QAAQ,EAAE,KADG;AAEbC,UAAAA,eAAe,EAAEK;AAFJ,SAAd;AAIA;;AACDT,MAAAA,UAAU,GAAGM,SAAb;AACA,KA/BmC;AAAA;;AAKpCK,EAAAA,iBAAiB,GAAI;AACpBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,YAAvC;AACA;;AACDC,EAAAA,oBAAoB,GAAG;AACtBH,IAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqC,KAAKF,YAA1C;AACA;;AAsBDG,EAAAA,MAAM,GAAE;AACP,UAAM;AAACb,MAAAA,eAAD;AAAiBD,MAAAA;AAAjB,QAA4B,KAAKe,KAAvC;AACA,WACC,MAAC,GAAD;AAAK,MAAA,QAAQ,EAAEf,QAAf;AAAyB,MAAA,eAAe,EAAEC,eAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGA;;AArCmC;;AAsCpC;AAGD,eAAeH,MAAf","sourcesContent":["import React from 'react';\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport Nav from \"./Nav\";\n\nRouter.onRouteChangeStart = () => {\n\tNProgress.start();\n};\nRouter.onRouteChangeComplete = () => {\n\tNProgress.done();\n};\n\nRouter.onRouteChangeError = () => {\n\tNProgress.done();\n};\n\nlet lastScroll = 0;\nclass Header extends React.Component {\n\tstate={\n\t\tscrolled: false,\n\t\tscrollDirection:false\n\t}\n\tcomponentDidMount () {\n\t\twindow.addEventListener('scroll', this.handleScroll);\n\t}\n\tcomponentWillUnmount() {\n\t\twindow.removeEventListener('scroll', this.handleScroll);\n\t}\n\thandleScroll = (event) => {\n\t\tlet scrollTop = event.target.scrollingElement.scrollTop;\n\t\tlet direction = 'down';\n\t\tif(scrollTop > lastScroll && scrollTop > 490){\n\t\t\tdirection = 'down';\n\t\t}else{\n\t\t\tdirection = 'up';\n\t\t}\n\t\tif(scrollTop> 100){\n\t\t\tthis.setState({\n\t\t\t\tscrolled: true,\n\t\t\t\tscrollDirection: direction\n\t\t\t});\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\tscrolled: false,\n\t\t\t\tscrollDirection: direction\n\t\t\t});\n\t\t}\n\t\tlastScroll = scrollTop\n\t}\n\trender(){\n\t\tconst {scrollDirection,scrolled}= this.state\n\t\treturn(\n\t\t\t<Nav scrolled={scrolled} scrollDirection={scrollDirection}/>\n\t\t)\n\t}\n};\n\t\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}